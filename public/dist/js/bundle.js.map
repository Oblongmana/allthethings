{"version":3,"sources":["app.js","directives/starRatingDir.js","services/containerSrv.js","services/countryListSrv.js","services/deleteAllUsersSrv.js","services/getUserColumnsSrv.js","services/postUserInfoSrv.js","services/stateListSrv.js","services/updateUserSrv.js","services/userListSrv.js","controllers/locContainer.js","controllers/locCreate.js","controllers/mainCtrl.js","controllers/notificationPrimary.js","controllers/notificationSecondary.js","controllers/settings.js","controllers/userCreate.js","controllers/userManage.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","directive","restrict","template","scope","ratingValue","max","onRatingSelected","link","elem","attrs","updateStars","stars","i","push","filled","toggle","index","rating","$watch","oldVal","newVal","service","$http","containerServiceTest","getContainerList","get","createContainer","data","method","then","httpResponse","console","log","JSON","stringify","updateContainer","id","deleteContainer","countryListServiceTest","getcountryList","deleteAllUsersServiceTest","deleteAllUsers","getUserColumnsSrvServiceTest","getColumnList","serviceTest","submitUserInfo","getStatesList","updateUserServiceTest","updateUser","userServiceTest","getUserList","getCustomUserList","$scope","containerSrv","uiGridConstants","locContainerTest","clearForm","document","getElementById","reset","getContainers","response","containers","gridOptions","container","name","enableRowSelection","enableRowHeaderSelection","multiSelect","enableSelectAll","enableFiltering","columnDefs","displayName","onRegisterApi","gridApi","selection","on","rowSelectionChanged","row","selected","isSelected","rowId","uid","rowObj","entity","enableDelete","edit","afterCellEdit","rowEntity","updateCont","update","upObj","cId","delete","gridData","length","splice","locCtrlTest","controllerTest","stateListSrv","countryListSrv","updateUserSrv","postUserInfoSrv","userListSrv","deleteAllUsersSrv","userCreateTest","stateListSrvTest","postUserInfoSrvTest","states","stateName","country","countryName","userInfo","rateFunction","renter_rating","deactivateUserChecked","inactive","userStatus","submit","sName","stateObj","exists","getUsers","users","email","first_name","firstName","state_id","alert","deleteUsers","getUserColumnsSrv","userManageControllerTest","StateServiceTest","grid1Api","updatedUser","updateObj","uId","expectedObj","last_name","phone","address1","address2","city","zip","auth_id","getId","country_id"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.grid', 'ui.grid.selection', 'ui.grid.edit'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        $stateProvider\r\n            .state('home', {\r\n                templateUrl: '../views/home.html',\r\n                url: '/'\r\n            })\r\n            .state('dashboard', {\r\n                templateUrl: '../views/dashboard.html',\r\n                url: '/dashboard',\r\n            })\r\n            .state('user_create', {\r\n                templateUrl: '../views/user_create.html',\r\n                url: '/user_create',\r\n                controller: 'userCreate'\r\n            })\r\n            .state('user_manage', {\r\n                templateUrl: '../views/user_manage.html',\r\n                url: '/user_manage',\r\n                controller: 'userManage'\r\n            })\r\n            .state('location_create', {\r\n                templateUrl: '../views/location_create.html',\r\n                url: '/location_create',\r\n                controller: 'locCreate'\r\n            })\r\n            .state('loc_container', {\r\n                templateUrl: '../views/loc_container.html',\r\n                url: '/loc_container',\r\n                controller: 'locContainer'\r\n            })\r\n    })","angular.module('app').directive('starRating', \r\n    function () {\r\n        return {\r\n            restrict: 'A',\r\n            template: '<ul class=\"rating\">'\r\n            + '\t<li ng-repeat=\"star in stars\" ng-class=\"star\" ng-click=\"toggle($index)\">'\r\n            + '\\u2605'\r\n            + '</li>'\r\n            + '</ul>',\r\n            scope: {\r\n                ratingValue: '=',\r\n                max: '=',\r\n                onRatingSelected: '&'\r\n            },\r\n            link: function (scope, elem, attrs) {\r\n                var updateStars = function () {\r\n                    scope.stars = [];\r\n                    for (var i = 0; i < scope.max; i++) {\r\n                        scope.stars.push({\r\n                            filled: i < scope.ratingValue\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.toggle = function (index) {\r\n                    scope.ratingValue = index + 1;\r\n                    scope.onRatingSelected({\r\n                        rating: index + 1\r\n                    });\r\n                };\r\n\r\n                scope.$watch('ratingValue',\r\n                    function (oldVal, newVal) {\r\n                        if (newVal) {\r\n                            updateStars();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        };\r\n    }\r\n);","angular.module('app').service('containerSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.containerServiceTest = 'the containerSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  get containers\r\n    this.getContainerList = () => ($http.get('http://localhost:3000/api/containers'))\r\n    // ...................  create containers\r\n    this.createContainer = (data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers',\r\n            method: 'POST',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n    // ...................  update containers\r\n    this.updateContainer = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n    // ...................  delete containers\r\n    this.deleteContainer = (id) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers/' + id,\r\n            method: 'DELETE'\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n})","angular.module('app').service('countryListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.countryListServiceTest = 'the countryListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getcountryList = () => ($http.get('http://localhost:3000/api/country'))\r\n})","angular.module('app').service('deleteAllUsersSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.deleteAllUsersServiceTest = 'the deleteAllUsersSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.deleteAllUsers = function () {\r\n        $http({\r\n            url: 'http://localhost:3000/api/user',\r\n            method: 'DELETE'\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n\r\n})","angular.module('app').service('getUserColumnsSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.getUserColumnsSrvServiceTest = 'the getUserColumnsSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getColumnList = () => ($http.get('http://localhost:3000/api/user/columns'))\r\n})\r\n","angular.module('app').service('postUserInfoSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the postUserInfoSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.submitUserInfo = (data) => {\r\n        // console.log(`clicked submit and got ${JSON.stringify(data)}`)\r\n        $http({\r\n            url: 'http://localhost:3000/api/users',\r\n            method: 'POST',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n})","angular.module('app').service('stateListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the stateListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getStatesList = () => ($http.get('http://localhost:3000/api/states'))\r\n})","angular.module('app').service('updateUserSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.updateUserServiceTest = 'the updateUserSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.updateUser = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/users/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n})\r\n\r\n","angular.module('app').service('userListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.userServiceTest = 'the userListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getUserList = () => ($http.get('http://localhost:3000/api/users'))\r\n    this.getCustomUserList = () => ($http.get('http://localhost:3000/api/users/custom'))\r\n})","angular.module('app').controller('locContainer', function ($scope, containerSrv, uiGridConstants, ) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.locContainerTest = 'locContainerTest controller is connected and operational'\r\n    $scope.containerServiceTest = containerSrv.containerServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"containerCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CONTAINER MANIPULATION\r\n    // .................... get list of container types and grid information\r\n    $scope.getContainers = () => containerSrv.getContainerList().then((response) => {\r\n        $scope.containers = response.data\r\n        $scope.gridOptions.data = response.data\r\n    })\r\n    $scope.getContainers()\r\n\r\n    // .................... create container types\r\n    $scope.container = {}\r\n    $scope.createContainer = () => {\r\n        $scope.gridOptions.data.push({\r\n            \"name\": $scope.container.name\r\n        });\r\n        // console.log(`this will be created ... ${JSON.stringify($scope.container)}`)\r\n        containerSrv.createContainer($scope.container)\r\n        $scope.clearForm()\r\n    }\r\n\r\n\r\n    // .................... update container types\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: false\r\n        , enableSelectAll: false\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'name', displayName: 'Description' }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n                $scope.enableDelete = false\r\n                $scope.selected === true ? $scope.enableDelete = false : $scope.enableDelete = true\r\n            })\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updateCont = rowEntity\r\n                $scope.update($scope.updateCont)\r\n            })\r\n        }\r\n    }\r\n\r\n    // .................... update a container\r\n    $scope.update = (upObj) => {\r\n        let cId = upObj.id\r\n        containerSrv.updateContainer(cId, upObj)\r\n    }\r\n\r\n    // .................... delete a container\r\n    $scope.delete = () => {\r\n        let gridData = $scope.gridOptions.data\r\n        let cId = $scope.rowObj.id\r\n        if ($scope.selected === true) {\r\n            for (let i = 0; i < gridData.length; i++) {\r\n                if (gridData[i].id === cId) {\r\n                    gridData.splice(i, 1)\r\n                }\r\n            }\r\n            containerSrv.deleteContainer(cId)\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('locCreate', function ($scope){\r\n// »»»»»»»»»»»»»»»»»»»║  TESTS \r\n$scope.locCtrlTest = 'locCreate controller is connected and operational'\r\n\r\n // .................... user object to submit  \r\n})","angular.module('app').controller('mainCtrl', function ($scope) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    $scope.controllerTest = 'Controller Engaged!!!'\r\n\r\n})","","","","angular.module('app').controller('userCreate', function ($scope, stateListSrv, countryListSrv, updateUserSrv, postUserInfoSrv, userListSrv, deleteAllUsersSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.userCreateTest = 'userCreate controller is working correctly'\r\n    $scope.stateListSrvTest = stateListSrv.serviceTest\r\n    $scope.postUserInfoSrvTest = postUserInfoSrv.serviceTest\r\n    $scope.userServiceTest = userListSrv.userServiceTest\r\n    $scope.deleteAllUsersServiceTest = deleteAllUsersSrv.deleteAllUsersServiceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n    \r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  VARIABLES\r\n\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"userCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ SUBMIT USER FORM DATA\r\n    // .................... user object to submit   \r\n    $scope.userInfo = { \"country_id\": 1, \"inactive\": false }\r\n\r\n    // .................... sets rent rating\r\n    $scope.rating = 5;\r\n    $scope.rateFunction = (rating) => $scope.userInfo.renter_rating = rating\r\n\r\n    // .................... sets checkbox\r\n    $scope.deactivateUserChecked = () => $scope.userInfo.inactive = $scope.userStatus\r\n\r\n\r\n    $scope.submit = () => {\r\n        var sName = $scope.stateObj.name\r\n        var exists = 0\r\n\r\n        // .................... checks to verify that the user doesn't already exist in the database.\r\n        var getUsers = () => {\r\n            userListSrv.getUserList().then((response) => {\r\n                $scope.users = response.data\r\n                // console.log(JSON.stringify($scope.users))\r\n                for (let i = 0; i < $scope.users.length; i++) {\r\n                    // console.log(\"what the fuck!\")\r\n                    // console.log(`db email ${$scope.users[i].email}`)\r\n                    if ($scope.users[i].email === $scope.userInfo.email && $scope.users[i].first_name === $scope.userInfo.firstName) {\r\n                        exists = 1\r\n                        break;\r\n                    }\r\n                }\r\n                // console.log(`exists inside after function ${exists}`)\r\n                for (let i = 0; i < $scope.stateName.length; i++) {\r\n                    if ($scope.stateName[i].name === sName) {\r\n                        $scope.userInfo.state_id = $scope.stateName[i].id\r\n                    }\r\n                }\r\n                if (exists === 0) {\r\n                    // console.log(`userInfo object that will be sent is ${JSON.stringify($scope.userInfo)}`)\r\n                    postUserInfoSrv.submitUserInfo($scope.userInfo)\r\n                    alert(`User has been created.`)\r\n                    $scope.clearForm()\r\n                }\r\n                else {\r\n                    alert(`User already exists!`)\r\n                }\r\n            })\r\n        }\r\n        getUsers()\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ DELETE ALL USERS\r\n    $scope.deleteUsers = () => { return deleteAllUsersSrv.deleteAllUsers() }\r\n\r\n\r\n\r\n    // no code below this line\r\n})","angular.module('app').controller('userManage', function ($scope, uiGridConstants, userListSrv, stateListSrv, countryListSrv, updateUserSrv, getUserColumnsSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS\r\n    $scope.userManageControllerTest = 'userManage Controller is ready to role!'\r\n    $scope.getUserColumnsSrvServiceTest = getUserColumnsSrv.getUserColumnsSrvServiceTest\r\n    $scope.updateUserServiceTest = updateUserSrv.updateUserServiceTest\r\n    $scope.StateServiceTest = stateListSrv.serviceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: false\r\n        , enableRowHeaderSelection: false\r\n        , enableFiltering: true\r\n        , columnDefs: [ //this shows which columns show in grid. the value needs to match the data key.\r\n            // { name: 'id' },\r\n            { name: 'first_name' }\r\n            , { name: 'last_name' }\r\n            , { name: 'phone' }\r\n            , { name: 'email' }\r\n            , { name: 'state', displayName: 'State'}\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n            $scope.grid1Api = gridApi\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updatedUser = rowEntity\r\n                $scope.update($scope.updatedUser)\r\n            })\r\n        }\r\n    };\r\n\r\n    // ....................  get column data\r\n    $scope.getUsers = () => userListSrv.getCustomUserList().then((response) => $scope.gridOptions.data = response.data)\r\n    $scope.getUsers()\r\n\r\n\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ UPDATE USER\r\n    $scope.update = (updateObj) => {\r\n        var uId = updateObj.id\r\n        var expectedObj = {\r\n            \"firstName\": updateObj.first_name\r\n            , \"lastName\": updateObj.last_name\r\n            , \"phone\": updateObj.phone\r\n            , \"email\": updateObj.email\r\n            , \"address1\": updateObj.address1\r\n            , \"address2\": updateObj.address2\r\n            , \"city\": updateObj.city\r\n            , \"state_id\": updateObj.state\r\n            , \"country_id\": updateObj.country\r\n            , \"zip\": updateObj.zip\r\n            , \"renter_rating\": updateObj.renter_rating\r\n            , \"inactive\": updateObj.inactive\r\n            , \"auth_id\": updateObj.auth_id\r\n        }\r\n        let getId = () => {\r\n            // ..... convert state name\r\n            for (let i = 0; i < $scope.stateName.length; i++) {\r\n                if ($scope.stateName[i].name === expectedObj.state_id) {\r\n                    expectedObj.state_id = $scope.stateName[i].id\r\n                }\r\n            }\r\n            // ..... convert country name\r\n            for (let i = 0; i < $scope.countryName.length; i++) {\r\n                if ($scope.countryName[i].name === expectedObj.country_id) {\r\n                    expectedObj.country_id = $scope.countryName[i].id\r\n                }\r\n            }\r\n            // console.log(`this is what will be sent! ${uId}`)\r\n            // console.log(`this is what will be sent! ${JSON.stringify(expectedObj)}`)\r\n            updateUserSrv.updateUser(uId, expectedObj)\r\n        }\r\n        getId()\r\n    }\r\n})"]}