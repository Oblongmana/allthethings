{"version":3,"sources":["app.js","controllers/itemCreate.js","controllers/itemManage.js","controllers/locClass.js","controllers/locContainer.js","controllers/locCreate.js","controllers/locManage.js","controllers/mainCtrl.js","controllers/notificationPrimary.js","controllers/notificationSecondary.js","controllers/settings.js","controllers/trackBy.js","controllers/userCreate.js","controllers/userManage.js","directives/hideShowDir.js","directives/starRatingDir.js","services/authService.js","services/checkUserSrv.js","services/containerSrv.js","services/countryListSrv.js","services/deleteAllUsersSrv.js","services/getUserColumnsSrv.js","services/itemDeleteSrv.js","services/itemGetSrv.js","services/itemPostSrv.js","services/itemPutSrv.js","services/locationDeleteSrv.js","services/locationsListSrv.js","services/locationUpdateSrv.js","services/locClassSrv.js","services/locCreateSrv.js","services/postUserInfoSrv.js","services/settingsSrv.js","services/stateListSrv.js","services/trackByDeleteSrv.js","services/trackByGetSrv.js","services/trackByPostSrv.js","services/trackByPutSrv.js","services/updateUserSrv.js","services/userListSrv.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","$scope","itemGetSrv","itemPostSrv","itemPutSrv","itemDeleteSrv","locationsListSrv","itemCreateTest","itemGetSrvTest","itemPostSrvTest","itemPutSrvTest","itemDeleteSrvTest","itemCreateObj","has_package","itemsObj","originalPackaging","packageStatus","repItem","getLocations","getLocationsList","then","locations","response","data","getLocationsCustomList","gridOptions","enableRowSelection","enableRowHeaderSelection","multiSelect","enableSelectAll","enableFiltering","columnDefs","name","enableCellEdit","width","displayName","onRegisterApi","gridApi","selection","on","rowSelectionChanged","row","selected","isSelected","rowId","uid","rowObj","entity","createItem","location","locationId","id","console","log","itemManageTest","locClassSrv","uiGridConstants","locClassTest","locClassServiceTest","clearForm","document","getElementById","reset","getLocClasses","getLocClassesList","locClasses","locClassObj","createLocClassObj","push","description","enableDelete","edit","afterCellEdit","rowEntity","updateCont","update","upObj","cId","updateLocClass","delete","gridData","i","length","splice","deleteLocClass","containerSrv","locContainerTest","containerServiceTest","getContainers","getContainerList","containers","container","createContainer","updateContainer","deleteContainer","locCreateSrv","locCtrlTest","locCreateServiceTest","locListServiceTest","containerObj","locationParentObj","locObj","setDefaults","cl","c","p","loc_class_id","undefined","container_id","parent_location_id","createLocation","exists","alert","submitLocationInfo","locationUpdateSrv","locationDeleteSrv","locManageTest","gridObj","loc_desc","x_coordinate","y_coordinate","z_coordinate","updateObj","deleteLocation","authService","checkUserSrv","controllerTest","loggedIn","login","logout","settingsSrv","settingsTest","defaultLocation","loc","sendArr","getDefaultLoc","getDefaultLocation","locid","updateDefault","dl","d_location_id","updateDefaultLocation","trackByGetSrv","trackByPostSrv","trackByPutSrv","trackByDeleteSrv","trackByTest","trackByGetSrvTest","trackByPostSrvTest","trackByPutSrvTest","trackByDeleteSrvTest","gettrackbys","getTrackByList","trackbys","trackByObj","createTrackBy","trackby_name","trackby_value","trackby_category","updateTrackBy","deleteTrackBy","stateListSrv","countryListSrv","updateUserSrv","postUserInfoSrv","userListSrv","deleteAllUsersSrv","userCreateTest","stateListSrvTest","serviceTest","postUserInfoSrvTest","userServiceTest","deleteAllUsersServiceTest","countryListServiceTest","states","getStatesList","stateName","country","getcountryList","countryName","userInfo","rating","rateFunction","renter_rating","deactivateUserChecked","inactive","userStatus","submit","sName","stateObj","getUsers","getUserList","users","email","first_name","firstName","state_id","submitUserInfo","deleteUsers","deleteAllUsers","getUserColumnsSrv","userManageControllerTest","getUserColumnsSrvServiceTest","updateUserServiceTest","StateServiceTest","grid1Api","updatedUser","getCustomUserList","uId","expectedObj","last_name","phone","address1","address2","city","zip","auth_id","getId","country_id","updateUser","directive","priority","terminal","compile","el","removeAttr","attr","fn","$compile","scope","restrict","template","ratingValue","max","onRatingSelected","link","elem","attrs","updateStars","stars","filled","toggle","index","$watch","oldVal","newVal","service","$http","authServiceTest","get","window","getUser","method","httpResponse","JSON","stringify","getColumnList","deleteItem","getItemList","updateItem","locationDeleteServiceTest","locationUpdateServiceTest"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.grid', 'ui.grid.selection', 'ui.grid.edit'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        // .......................  authorization\r\n        // var authentication = {\r\n        //     authenticate: ($state, checkUserSrv) => {\r\n        //         checkUserSrv.getUser().then((response) => {\r\n        //             if (!response.data.isFirstTime) {\r\n        //                 event.preventDefault()\r\n        //                 $state.go('dashboard')\r\n        //             }\r\n        //         }).catch(error => {\r\n        //             event.preventDefault()\r\n        //             $state.go('home')\r\n        //         })\r\n        //     }\r\n        // }\r\n        $stateProvider\r\n            .state('home', {\r\n                templateUrl: '../views/home.html',\r\n                url: '/'\r\n            })\r\n            .state('dashboard', {\r\n                templateUrl: '../views/dashboard.html',\r\n                url: '/dashboard',\r\n                // resolve: authentication\r\n            })\r\n            .state('user_create_new', {\r\n                templateUrl: '../views/user_create.html',\r\n                url: '/user_create_new',\r\n                controller: 'userCreate',\r\n                // resolve: authentication\r\n            })\r\n            .state('user_create', {\r\n                templateUrl: '../views/user_create.html',\r\n                url: '/user_create',\r\n                controller: 'userCreate',\r\n                // resolve: authentication\r\n            })\r\n            .state('user_manage', {\r\n                templateUrl: '../views/user_manage.html',\r\n                url: '/user_manage',\r\n                controller: 'userManage',\r\n                // resolve: authentication\r\n            })\r\n            .state('location_create', {\r\n                templateUrl: '../views/location_create.html',\r\n                url: '/location_create',\r\n                controller: 'locCreate',\r\n                // resolve: authentication\r\n            })\r\n            .state('loc_container', { // MOVE INTO MODAL\r\n                templateUrl: '../views/loc_container.html',\r\n                url: '/loc_container',\r\n                controller: 'locContainer',\r\n                // resolve: authentication\r\n            })\r\n            .state('loc_class', { // MOVE INTO MODAL\r\n                templateUrl: '../views/loc_class.html',\r\n                url: '/loc_class',\r\n                controller: 'locClass',\r\n                // resolve: authentication\r\n            })\r\n            .state('location_manage', {\r\n                templateUrl: '../views/location_manage.html',\r\n                url: '/location_manage',\r\n                controller: 'locManage',\r\n                // resolve: authentication\r\n            })\r\n            .state('trackbys', { // MOVE INTO MODAL\r\n                templateUrl: '../views/trackbys.html',\r\n                url: '/trackbys',\r\n                controller: 'trackBy',\r\n                // resolve: authentication\r\n            })\r\n            .state('settings', { // MOVE INTO MODAL\r\n                templateUrl: '../views/settings.html',\r\n                url: '/settings',\r\n                controller: 'settings',\r\n                // resolve: authentication\r\n            })\r\n            .state('item_create', { // MOVE INTO MODAL\r\n                templateUrl: '../views/item_create.html',\r\n                url: '/item_create',\r\n                controller: 'itemCreate',\r\n                // resolve: authentication\r\n            })\r\n            .state('item_manage', { // MOVE INTO MODAL\r\n                templateUrl: '../views/item_manage.html',\r\n                url: '/item_manage',\r\n                controller: 'itemManage',\r\n                // resolve: authentication\r\n            })\r\n    })","angular.module('app').controller('itemCreate', function ($scope, itemGetSrv, itemPostSrv, itemPutSrv, itemDeleteSrv, locationsListSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.itemCreateTest = 'itemCreate controller is connected and operational'\r\n    $scope.itemGetSrvTest = itemGetSrv.itemGetSrvTest\r\n    $scope.itemPostSrvTest = itemPostSrv.itemPostSrvTest\r\n    $scope.itemPutSrvTest = itemPutSrv.itemPutSrvTest\r\n    $scope.itemDeleteSrvTest = itemDeleteSrv.itemDeleteSrvTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  VARIABLES\r\n    $scope.itemCreateObj = { has_package: false }\r\n    const itemsObj = $scope.itemCreateObj\r\n    $scope.originalPackaging = () => {\r\n        $scope.itemCreateObj.has_package = $scope.packageStatus\r\n    }\r\n    $scope.repItem = 'replink'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET LOCATION LIST\r\n    $scope.getLocations = () => locationsListSrv.getLocationsList().then(response => $scope.locations = response.data)\r\n    $scope.getLocations()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ LOCATION CLASSIFICATION MANIPULATION\r\n    // .................... get list of location classes and grid information\r\n    $scope.getLocations = () => locationsListSrv.getLocationsCustomList().then(response => $scope.gridOptions.data = response.data)\r\n    $scope.getLocations()\r\n\r\n    // .................... columns and data\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: true\r\n        , enableSelectAll: true\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'id', enableCellEdit: false, width: 75 }\r\n            , { name: 'loc_desc', displayName: 'Description' }\r\n            , { name: 'loc_class_name', displayName: 'Classification', enableCellEdit: false }\r\n            , { name: 'loc_class_desc', displayName: 'Class Desc.', enableCellEdit: false }\r\n            , { name: 'loc_container', displayName: 'Container', enableCellEdit: false }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n            })\r\n        }\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  CREATE ITEMS\r\n    $scope.createItem = () => {\r\n        $scope.itemCreateObj.location = $scope.locationId.id\r\n        console.log(itemsObj)//this is the object that will be sent to the server\r\n\r\n    }\r\n})","angular.module('app').controller('itemManage', function($scope, itemGetSrv, itemPostSrv, itemPutSrv, itemDeleteSrv){\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.itemManageTest = 'itemManage controller is connected and operational'\r\n    $scope.itemGetSrvTest = itemGetSrv.itemGetSrvTest\r\n    $scope.itemPostSrvTest = itemPostSrv.itemPostSrvTest\r\n    $scope.itemPutSrvTest = itemPutSrv.itemPutSrvTest\r\n    $scope.itemDeleteSrvTest = itemDeleteSrv.itemDeleteSrvTest\r\n})","angular.module('app').controller('locClass', function ($scope, locClassSrv, uiGridConstants, ) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.locClassTest = 'locClass controller is connected and operational'\r\n    $scope.locClassServiceTest = locClassSrv.locClassServiceTest\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"classCreateForm\").reset()\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ LOCATION CLASSIFICATION MANIPULATION\r\n    // .................... get list of location classes and grid information\r\n    $scope.getLocClasses = () => locClassSrv.getLocClassesList().then((response) => {\r\n        $scope.locClasses = response.data\r\n        $scope.gridOptions.data = response.data\r\n    })\r\n    $scope.getLocClasses()\r\n\r\n    // // .................... location classes types\r\n    $scope.locClassObj = {}\r\n    $scope.createLocClassObj = () => {\r\n        $scope.gridOptions.data.push({\r\n            \"name\": $scope.locClassObj.name\r\n            , \"description\": $scope.locClassObj.description\r\n        });\r\n        // console.log(`this will be created ... ${JSON.stringify($scope.locClassObj)}`)\r\n        locClassSrv.createLocClassObj($scope.locClassObj)\r\n        $scope.clearForm()\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: false\r\n        , enableSelectAll: false\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'name', displayName: 'Name' }\r\n            , { name: 'description', displayName: 'Description' }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n                $scope.enableDelete = false\r\n                $scope.selected === true ? $scope.enableDelete = false : $scope.enableDelete = true\r\n            })\r\n\r\n            // ...........   update the loc class on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updateCont = rowEntity\r\n                $scope.update($scope.updateCont)\r\n            })\r\n        }\r\n    }\r\n\r\n    // .................... update a location class\r\n    $scope.update = (upObj) => {\r\n        let cId = upObj.id\r\n        locClassSrv.updateLocClass(cId, upObj)\r\n    }\r\n\r\n    // .................... delete a container\r\n    $scope.delete = () => {\r\n        let gridData = $scope.gridOptions.data\r\n        let cId = $scope.rowObj.id\r\n        if ($scope.selected === true) {\r\n            for (let i = 0; i < gridData.length; i++) {\r\n                if (gridData[i].id === cId) {\r\n                    gridData.splice(i, 1)\r\n                }\r\n            }\r\n            locClassSrv.deleteLocClass(cId)\r\n            $scope.enableDelete = true\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('locContainer', function ($scope, containerSrv, uiGridConstants, ) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.locContainerTest = 'locContainerTest controller is connected and operational'\r\n    $scope.containerServiceTest = containerSrv.containerServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"containerCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CONTAINER MANIPULATION\r\n    // .................... get list of container types and grid information\r\n    $scope.getContainers = () => containerSrv.getContainerList().then((response) => {\r\n        $scope.containers = response.data\r\n        $scope.gridOptions.data = response.data\r\n    })\r\n    $scope.getContainers()\r\n\r\n    // .................... create container types\r\n    $scope.container = {}\r\n    $scope.createContainer = () => {\r\n        $scope.gridOptions.data.push({\r\n            \"name\": $scope.container.name\r\n        });\r\n        // console.log(`this will be created ... ${JSON.stringify($scope.container)}`)\r\n        containerSrv.createContainer($scope.container)\r\n        $scope.clearForm()\r\n    }\r\n\r\n\r\n    // .................... update container types\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: false\r\n        , enableSelectAll: false\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'name', displayName: 'Description' }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n                $scope.enableDelete = false\r\n                $scope.selected === true ? $scope.enableDelete = false : $scope.enableDelete = true\r\n            })\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updateCont = rowEntity\r\n                $scope.update($scope.updateCont)\r\n            })\r\n        }\r\n    }\r\n\r\n    // .................... update a container\r\n    $scope.update = (upObj) => {\r\n        let cId = upObj.id\r\n        containerSrv.updateContainer(cId, upObj)\r\n    }\r\n\r\n    // .................... delete a container\r\n    $scope.delete = () => {\r\n        let gridData = $scope.gridOptions.data\r\n        let cId = $scope.rowObj.id\r\n        if ($scope.selected === true) {\r\n            for (let i = 0; i < gridData.length; i++) {\r\n                if (gridData[i].id === cId) {\r\n                    gridData.splice(i, 1)\r\n                }\r\n            }\r\n            containerSrv.deleteContainer(cId)\r\n            $scope.enableDelete = true\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('locCreate', function ($scope, locCreateSrv, containerSrv, locClassSrv, locationsListSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.locCtrlTest = 'locCreate controller is connected and operational'\r\n    $scope.locCreateServiceTest = locCreateSrv.locCreateServiceTest\r\n    $scope.containerServiceTest = containerSrv.containerServiceTest\r\n    $scope.locClassServiceTest = locClassSrv.locClassServiceTest\r\n    $scope.locListServiceTest = locationsListSrv.locListServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"createLocationForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET CONTAINER LIST \r\n    $scope.getContainers = () => containerSrv.getContainerList().then((response) => $scope.containers = response.data)\r\n    $scope.getContainers()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET LOCATION CLASSIFICATION LIST\r\n    $scope.getLocClasses = () => locClassSrv.getLocClassesList().then((response) => $scope.locClasses = response.data)\r\n    $scope.getLocClasses()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET LOCATION LIST\r\n    $scope.getLocations = () => locationsListSrv.getLocationsList().then((response) => $scope.locations = response.data)\r\n    $scope.getLocations()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  CREATE A NEW LOCATION\r\n    //  .................... objects used to post\r\n    $scope.locClassObj = []\r\n    $scope.containerObj = []\r\n    $scope.locationParentObj = []\r\n    $scope.locObj = {}\r\n    //  .................... function to cover defaults are sent if not user didn't make selection\r\n    $scope.setDefaults = () => {\r\n        let cl = $scope.locClassObj.length\r\n        let c = $scope.containerObj.length\r\n        let p = $scope.locationParentObj.length\r\n        cl === 0 ? $scope.locObj.loc_class_id = 1 : undefined\r\n        c === 0 ? $scope.locObj.container_id = 1 : undefined\r\n        p === 0 ? $scope.locObj.parent_location_id = 1 : undefined\r\n    }\r\n    // ....................  create location\r\n    $scope.createLocation = () => {\r\n        $scope.getLocations()\r\n        $scope.locObj.loc_class_id = $scope.locClassObj.id\r\n        $scope.locObj.container_id = $scope.containerObj.id\r\n        $scope.locObj.parent_location_id = $scope.locationParentObj.id\r\n        $scope.setDefaults()\r\n        var exists = 0\r\n        for (let i = 0; i < $scope.locations.length; i++) {\r\n            if ($scope.locations[i].description === $scope.locObj.description && $scope.locations[i].parent_location_id === $scope.locObj.parent_location_id) {\r\n                exists = 1\r\n                break;\r\n            }\r\n            else {\r\n                exists = 0\r\n            }\r\n        }\r\n        if(exists === 1) {\r\n            alert(`this is a duplicate`)\r\n        }\r\n        else {\r\n            locCreateSrv.submitLocationInfo($scope.locObj)\r\n            $scope.getLocations() \r\n            $scope.clearForm()\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('locManage', function ($scope, locationsListSrv, locationUpdateSrv, locationDeleteSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.locManageTest = 'locManage controller is connected and operational'\r\n    $scope.locListServiceTest = locationsListSrv.locListServiceTest\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ LOCATION CLASSIFICATION MANIPULATION\r\n    // .................... get list of location classes and grid information\r\n    $scope.getLocations = () => locationsListSrv.getLocationsCustomList().then((response) => {\r\n        $scope.gridOptions.data = response.data\r\n    })\r\n    $scope.getLocations()\r\n\r\n    // .................... columns and data\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: false\r\n        , enableSelectAll: false\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'id', enableCellEdit: false, width: 75 }\r\n            , { name: 'loc_desc', displayName: 'Description' }\r\n            , { name: 'loc_class_name', displayName: 'Classification', enableCellEdit: false }\r\n            , { name: 'loc_class_desc', displayName: 'Class Desc.', enableCellEdit: false }\r\n            , { name: 'loc_container', displayName: 'Container', enableCellEdit: false }\r\n            , { name: 'x_coordinate', displayName: 'X', width: 75 }\r\n            , { name: 'y_coordinate', displayName: 'Y', width: 75 }\r\n            , { name: 'z_coordinate', displayName: 'Z', width: 75 }\r\n            , { name: 'parent_location_id', displayName: 'Parent', width: 110 }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n                $scope.enableDelete = false\r\n                $scope.selected === true ? $scope.enableDelete = false : $scope.enableDelete = true\r\n            })\r\n\r\n            // ...........   update the location on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updateCont = rowEntity\r\n                // ............. drop containers and classes text from entity obj\r\n                var gridObj = {container_id: rowEntity.container_id, id: rowEntity.id, loc_class_id: rowEntity.loc_class_id, loc_desc: rowEntity.loc_desc, parent_location_id: rowEntity.parent_location_id, x_coordinate: rowEntity.x_coordinate, y_coordinate: rowEntity.y_coordinate, z_coordinate: rowEntity.z_coordinate}\r\n                // ............. call update\r\n                $scope.update(gridObj)\r\n            })\r\n        }\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  UPDATE LOCATIONS\r\n    $scope.update = (updateObj) => locationUpdateSrv.submitLocationInfo(updateObj)\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  DELETE LOCATIONS\r\n    $scope.delete = () => {\r\n        let gridData = $scope.gridOptions.data\r\n        let cId = $scope.rowObj.id\r\n        if ($scope.selected === true) {\r\n            for (let i = 0; i < gridData.length; i++) {\r\n                if (gridData[i].id === cId) {\r\n                    gridData.splice(i, 1)\r\n                }\r\n            }\r\n            locationDeleteSrv.deleteLocation(cId)\r\n            $scope.enableDelete = true\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('mainCtrl', function ($scope, authService, checkUserSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    $scope.controllerTest = 'Controller Engaged!!!'\r\n\r\n    $scope.loggedIn = false;\r\n\r\n    $scope.login = () => $scope.loggedIn = true\r\n    $scope.logout = () => {\r\n        $scope.loggedIn = false\r\n        authService.logout()\r\n    }\r\n    // .......................  checks to see if the user is logged in\r\n    // checkUserSrv.getUser().then((response) => $scope.loggedIn = true)\r\n\r\n})","","","angular.module('app').controller('settings', function ($scope, uiGridConstants, locationsListSrv, settingsSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.settingsTest = 'settings controller is connected and operational'\r\n    $scope.locListServiceTest = locationsListSrv.locListServiceTest\r\n    // »»»»»»»»»»»»»»»»»»»║  VARIABLES \r\n    $scope.defaultLocation\r\n    $scope.loc\r\n    var sendArr = {}\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  DATABASE CALLS\r\n    // .................... get list of locations\r\n    $scope.getLocations = () => locationsListSrv.getLocationsList().then(response => $scope.locations = response.data)\r\n    $scope.getLocations()\r\n\r\n    // .................... get default location\r\n    $scope.getDefaultLoc = () => settingsSrv.getDefaultLocation().then(response => { \r\n        $scope.loc = response.data[0].description;\r\n        $scope.locid = response.data[0].id\r\n         $scope.defaultLocation = $scope.loc })\r\n    $scope.getDefaultLoc()\r\n\r\n    // .................... will convert to update default location\r\n    $scope.updateDefault = () => {\r\n        var dl = $scope.defaultLocation\r\n        if (typeof dl === 'string') {\r\n            // console.log(dl)\r\n            sendArr.d_location_id = $scope.locid\r\n        }\r\n        else {\r\n            // console.log(dl.description)\r\n            sendArr.d_location_id = dl.id\r\n        }        \r\n        console.log(sendArr) //this is what we will send to the db PUT\r\n        settingsSrv.updateDefaultLocation(sendArr)\r\n    }\r\n})","angular.module('app').controller('trackBy', function ($scope, uiGridConstants, trackByGetSrv, trackByPostSrv, trackByPutSrv, trackByDeleteSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.trackByTest = 'trackBy controller is connected and operational'\r\n    $scope.trackByGetSrvTest = trackByGetSrv.trackByGetSrvTest\r\n    $scope.trackByPostSrvTest = trackByPostSrv.trackByPostSrvTest\r\n    $scope.trackByPutSrvTest = trackByPutSrv.trackByPutSrvTest\r\n    $scope.trackByDeleteSrvTest = trackByDeleteSrv.trackByDeleteSrvTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"trackbyCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ TRACKBY MANIPULATION\r\n    // .................... get list of trackby types and grid information\r\n    $scope.gettrackbys = () => trackByGetSrv.getTrackByList().then((response) => {\r\n        $scope.trackbys = response.data\r\n        $scope.gridOptions.data = response.data\r\n        // console.log(`gridOptions.data = ${JSON.stringify(response.data)}`)\r\n    })\r\n    $scope.gettrackbys()\r\n\r\n    // .................... create trackby types\r\n    $scope.trackByObj = {}\r\n    $scope.createTrackBy = () => {\r\n        $scope.gridOptions.data.push({\r\n            \"trackby_name\": $scope.trackByObj.trackby_name\r\n            , \"trackby_value\": $scope.trackByObj.trackby_value\r\n            , \"trackby_category\": $scope.trackByObj.trackby_category\r\n        });\r\n        trackByPostSrv.createTrackBy($scope.trackByObj)\r\n\r\n        $scope.clearForm()\r\n    }\r\n\r\n\r\n    // .................... update trackby types\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: true\r\n        , enableRowHeaderSelection: true\r\n        , multiSelect: false\r\n        , enableSelectAll: false\r\n        , enableFiltering: true\r\n        , columnDefs: [\r\n            { name: 'id', enableCellEdit: false}\r\n            , { name: 'trackby_name', displayName: 'Name' }\r\n            , { name: 'trackby_value', displayName: 'Value' }\r\n            , { name: 'trackby_category', displayName: 'Category' }\r\n        ]\r\n\r\n        , onRegisterApi: (gridApi) => {\r\n\r\n            gridApi.selection.on.rowSelectionChanged($scope, function (row) {\r\n                $scope.selected = row.isSelected\r\n                $scope.rowId = row.uid\r\n                $scope.rowObj = row.entity\r\n                $scope.enableDelete = false\r\n                $scope.selected === true ? $scope.enableDelete = false : $scope.enableDelete = true\r\n            })\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updateCont = rowEntity\r\n                $scope.update($scope.updateCont)\r\n            })\r\n        }\r\n    }\r\n\r\n    // .................... update a trackby\r\n    $scope.update = (upObj) => {\r\n        let cId = upObj.id\r\n        trackByPutSrv.updateTrackBy(cId, upObj)\r\n    }\r\n\r\n    // .................... delete a trackby\r\n    $scope.delete = () => {\r\n        let gridData = $scope.gridOptions.data\r\n        let cId = $scope.rowObj.id\r\n        if ($scope.selected === true) {\r\n            for (let i = 0; i < gridData.length; i++) {\r\n                if (gridData[i].id === cId) {\r\n                    gridData.splice(i, 1)\r\n                }\r\n            }\r\n            trackByDeleteSrv.deleteTrackBy(cId)\r\n            $scope.enableDelete = true\r\n        }\r\n    }\r\n\r\n})","angular.module('app').controller('userCreate', function ($scope, stateListSrv, countryListSrv, updateUserSrv, postUserInfoSrv, userListSrv, deleteAllUsersSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.userCreateTest = 'userCreate controller is working correctly'\r\n    $scope.stateListSrvTest = stateListSrv.serviceTest\r\n    $scope.postUserInfoSrvTest = postUserInfoSrv.serviceTest\r\n    $scope.userServiceTest = userListSrv.userServiceTest\r\n    $scope.deleteAllUsersServiceTest = deleteAllUsersSrv.deleteAllUsersServiceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n    \r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  VARIABLES\r\n\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"userCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ SUBMIT USER FORM DATA\r\n    // .................... user object to submit   \r\n    $scope.userInfo = { \"country_id\": 1, \"inactive\": false }\r\n\r\n    // .................... sets rent rating\r\n    $scope.rating = 5;\r\n    $scope.rateFunction = (rating) => $scope.userInfo.renter_rating = rating\r\n\r\n    // .................... sets checkbox\r\n    $scope.deactivateUserChecked = () => $scope.userInfo.inactive = $scope.userStatus\r\n\r\n\r\n    $scope.submit = () => {\r\n        var sName = $scope.stateObj.name\r\n        var exists = 0\r\n\r\n        // .................... checks to verify that the user doesn't already exist in the database.\r\n        var getUsers = () => {\r\n            userListSrv.getUserList().then((response) => {\r\n                $scope.users = response.data\r\n                // console.log(JSON.stringify($scope.users))\r\n                for (let i = 0; i < $scope.users.length; i++) {\r\n                    // console.log(`db email ${$scope.users[i].email}`)\r\n                    if ($scope.users[i].email === $scope.userInfo.email && $scope.users[i].first_name === $scope.userInfo.firstName) {\r\n                        exists = 1\r\n                        break;\r\n                    }\r\n                }\r\n                // console.log(`exists inside after function ${exists}`)\r\n                for (let i = 0; i < $scope.stateName.length; i++) {\r\n                    if ($scope.stateName[i].name === sName) {\r\n                        $scope.userInfo.state_id = $scope.stateName[i].id\r\n                    }\r\n                }\r\n                if (exists === 0) {\r\n                    // console.log(`userInfo object that will be sent is ${JSON.stringify($scope.userInfo)}`)\r\n                    postUserInfoSrv.submitUserInfo($scope.userInfo)\r\n                    alert(`User has been created.`)\r\n                    $scope.clearForm()\r\n                }\r\n                else {\r\n                    alert(`User already exists!`)\r\n                }\r\n            })\r\n        }\r\n        getUsers()\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ DELETE ALL USERS\r\n    $scope.deleteUsers = () => { return deleteAllUsersSrv.deleteAllUsers() }\r\n\r\n\r\n\r\n    // no code below this line\r\n})","angular.module('app').controller('userManage', function ($scope, uiGridConstants, userListSrv, stateListSrv, countryListSrv, updateUserSrv, getUserColumnsSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS\r\n    $scope.userManageControllerTest = 'userManage Controller is ready to role!'\r\n    $scope.getUserColumnsSrvServiceTest = getUserColumnsSrv.getUserColumnsSrvServiceTest\r\n    $scope.updateUserServiceTest = updateUserSrv.updateUserServiceTest\r\n    $scope.StateServiceTest = stateListSrv.serviceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: false\r\n        , enableRowHeaderSelection: false\r\n        , enableFiltering: true\r\n        , columnDefs: [ //this shows which columns show in grid. the value needs to match the data key.\r\n            // { name: 'id' },\r\n            { name: 'first_name' }\r\n            , { name: 'last_name' }\r\n            , { name: 'phone' }\r\n            , { name: 'email' }\r\n            , { name: 'state', displayName: 'State'}\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n            $scope.grid1Api = gridApi\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updatedUser = rowEntity\r\n                $scope.update($scope.updatedUser)\r\n            })\r\n        }\r\n    };\r\n\r\n    // ....................  get column data\r\n    $scope.getUsers = () => userListSrv.getCustomUserList().then((response) => $scope.gridOptions.data = response.data)\r\n    $scope.getUsers()\r\n\r\n\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ UPDATE USER\r\n    $scope.update = (updateObj) => {\r\n        var uId = updateObj.id\r\n        var expectedObj = {\r\n            \"firstName\": updateObj.first_name\r\n            , \"lastName\": updateObj.last_name\r\n            , \"phone\": updateObj.phone\r\n            , \"email\": updateObj.email\r\n            , \"address1\": updateObj.address1\r\n            , \"address2\": updateObj.address2\r\n            , \"city\": updateObj.city\r\n            , \"state_id\": updateObj.state\r\n            , \"country_id\": updateObj.country\r\n            , \"zip\": updateObj.zip\r\n            , \"renter_rating\": updateObj.renter_rating\r\n            , \"inactive\": updateObj.inactive\r\n            , \"auth_id\": updateObj.auth_id\r\n        }\r\n        let getId = () => {\r\n            // ..... convert state name\r\n            for (let i = 0; i < $scope.stateName.length; i++) {\r\n                if ($scope.stateName[i].name === expectedObj.state_id) {\r\n                    expectedObj.state_id = $scope.stateName[i].id\r\n                }\r\n            }\r\n            // ..... convert country name\r\n            for (let i = 0; i < $scope.countryName.length; i++) {\r\n                if ($scope.countryName[i].name === expectedObj.country_id) {\r\n                    expectedObj.country_id = $scope.countryName[i].id\r\n                }\r\n            }\r\n            // console.log(`this is what will be sent! ${uId}`)\r\n            // console.log(`this is what will be sent! ${JSON.stringify(expectedObj)}`)\r\n            updateUserSrv.updateUser(uId, expectedObj)\r\n        }\r\n        getId()\r\n    }\r\n})","angular.module('app').directive('hideShow', function () {\r\n  return {\r\n    priority:1001, // compiles first\r\n    terminal:true, // prevent lower priority directives to compile after it\r\n    compile: function(el) {\r\n      el.removeAttr('my-dir'); // necessary to avoid infinite compile loop\r\n      el.attr('ng-click', 'fxn()');\r\n      var fn = $compile(el);\r\n      return function(scope){\r\n        fn(scope);\r\n      };\r\n    }\r\n  };\r\n});","angular.module('app').directive('starRating', \r\n    function () {\r\n        return {\r\n            restrict: 'A',\r\n            template: '<ul class=\"rating\">'\r\n            + '\t<li ng-repeat=\"star in stars\" ng-class=\"star\" ng-click=\"toggle($index)\">'\r\n            + '\\u2605'\r\n            + '</li>'\r\n            + '</ul>',\r\n            scope: {\r\n                ratingValue: '=',\r\n                max: '=',\r\n                onRatingSelected: '&'\r\n            },\r\n            link: function (scope, elem, attrs) {\r\n                var updateStars = function () {\r\n                    scope.stars = [];\r\n                    for (var i = 0; i < scope.max; i++) {\r\n                        scope.stars.push({\r\n                            filled: i < scope.ratingValue\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.toggle = function (index) {\r\n                    scope.ratingValue = index + 1;\r\n                    scope.onRatingSelected({\r\n                        rating: index + 1\r\n                    });\r\n                };\r\n\r\n                scope.$watch('ratingValue',\r\n                    function (oldVal, newVal) {\r\n                        if (newVal) {\r\n                            updateStars();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        };\r\n    }\r\n);","angular.module('app').service('authService', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.authServiceTest = 'the authService is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.logout = () => $http.get('/auth/logout').then(response => window.location = response.data)\r\n})","angular.module('app').service('checkUserSrv', function($http){\r\n\r\nthis.getUser = () => $http.get('http://localhost:3000/auth/me')\r\n\r\n})","angular.module('app').service('containerSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.containerServiceTest = 'the containerSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  get containers\r\n    this.getContainerList = () => ($http.get('http://localhost:3000/api/containers'))\r\n    // ...................  create containers\r\n    this.createContainer = (data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n    // ...................  update containers\r\n    this.updateContainer = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n    // ...................  delete containers\r\n    this.deleteContainer = (id) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/containers/' + id,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n})","angular.module('app').service('countryListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.countryListServiceTest = 'the countryListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getcountryList = () => ($http.get('http://localhost:3000/api/country'))\r\n})","angular.module('app').service('deleteAllUsersSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.deleteAllUsersServiceTest = 'the deleteAllUsersSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.deleteAllUsers = function () {\r\n        $http({\r\n            url: 'http://localhost:3000/api/user',\r\n            method: 'DELETE'\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n\r\n})","angular.module('app').service('getUserColumnsSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.getUserColumnsSrvServiceTest = 'the getUserColumnsSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getColumnList = () => ($http.get('http://localhost:3000/api/user/columns'))\r\n})\r\n","angular.module('app').service('itemDeleteSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.itemDeleteSrvTest = 'the itemDeleteSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  delete items\r\n    this.deleteItem = (id) => {\r\n        $http({\r\n            url: '/api/trackbys/' + id,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n})","angular.module('app').service('itemGetSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.itemGetSrvTest = 'the itemGetSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  get items\r\n    this.getItemList = () => $http.get('/api/trackbys/')\r\n})","angular.module('app').service('itemPostSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.itemPostSrvTest = 'the itemPostSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  create item\r\n    this.createItem = (data) => {\r\n        $http({\r\n            url: '/api/trackbys/',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('itemPutSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.itemPutSrvTest = 'the itemPutSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  update items\r\n    this.updateItem = (id, data) => {\r\n        $http({\r\n            url: '/api/trackbys/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('locationDeleteSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.locationDeleteServiceTest = 'the locationDeleteSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  delete loc_classes\r\n    this.deleteLocation = (id) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/locations/' + id,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n})","angular.module('app').service('locationsListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.locListServiceTest = 'the locationsListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getLocationsList = () => ($http.get('http://localhost:3000/api/locations')) \r\n    this.getLocationsCustomList = () => ($http.get('http://localhost:3000/api/locations/custom')) \r\n})","angular.module('app').service('locationUpdateSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.locationUpdateServiceTest = 'the locationUpdateSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.submitLocationInfo = (data) => {\r\n        // console.log(`data to be sent ${JSON.stringify(data)}`)\r\n        $http({\r\n            url: 'http://localhost:3000/api/locations/' + data.id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('locClassSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.locClassServiceTest = 'the locClassSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  get loc_classes\r\n    this.getLocClassesList = () => ($http.get('http://localhost:3000/api/loc_classes'))\r\n    // ...................  create loc_classes\r\n    this.createLocClassObj = (data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/loc_classes',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n    // ...................  update loc_classes\r\n    this.updateLocClass = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/loc_classes/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n    // ...................  delete loc_classes\r\n    this.deleteLocClass = (id) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/loc_classes/' + id,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n})","angular.module('app').service('locCreateSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.locCreateServiceTest = 'the locCreateSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.submitLocationInfo = (data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/locations',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('postUserInfoSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the postUserInfoSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.submitUserInfo = (data) => {\r\n        // console.log(`clicked submit and got ${JSON.stringify(data)}`)\r\n        $http({\r\n            url: 'http://localhost:3000/api/users',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('settingsSrv', function ($http) {\r\n    // ...................  get default location\r\n    this.getDefaultLocation = () => $http.get('http://localhost:3000/api/settings/default_location')\r\n\r\n    // ...................  update default location\r\n    this.updateDefaultLocation = (data) => {\r\n        console.log('sending data')\r\n        console.log(data)\r\n        $http({\r\n            url: '/api/settings/default_location',\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n\r\n})","angular.module('app').service('stateListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the stateListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getStatesList = () => ($http.get('http://localhost:3000/api/states'))\r\n})","angular.module('app').service('trackByDeleteSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.trackByDeleteSrvTest = 'the trackByDeleteSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  delete trackbys\r\n    this.deleteTrackBy = (id) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/trackbys/' + id,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n})","angular.module('app').service('trackByGetSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.trackByGetSrvTest = 'the trackByGetSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  get trackbys\r\n    this.getTrackByList = () => ($http.get('http://localhost:3000/api/trackbys/'))\r\n})","angular.module('app').service('trackByPostSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.trackByPostSrvTest = 'the trackByPostSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  create trackbys\r\n    this.createTrackBy = (data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/trackbys/',\r\n            method: 'POST',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('trackByPutSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.trackByPutSrvTest = 'the trackByPutSrv is connected'\r\n\r\n    // // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    // ...................  update trackbys\r\n    this.updateTrackBy = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/trackbys/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n})","angular.module('app').service('updateUserSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.updateUserServiceTest = 'the updateUserSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.updateUser = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/users/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        })\r\n    }\r\n})\r\n\r\n","angular.module('app').service('userListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.userServiceTest = 'the userListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getUserList = () => ($http.get('http://localhost:3000/api/users'))\r\n    this.getCustomUserList = () => ($http.get('http://localhost:3000/api/users/custom'))\r\n})"]}