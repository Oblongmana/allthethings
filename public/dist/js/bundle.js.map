{"version":3,"sources":["app.js","controllers/mainCtrl.js","controllers/notificationPrimary.js","controllers/notificationSecondary.js","controllers/settings.js","controllers/userCreate.js","controllers/userManage.js","directives/starRatingDir.js","services/countryListSrv.js","services/deleteAllUsersSrv.js","services/getUserColumnsSrv.js","services/postUserInfoSrv.js","services/stateListSrv.js","services/updateUserSrv.js","services/userListSrv.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","$scope","controllerTest","stateListSrv","countryListSrv","updateUserSrv","postUserInfoSrv","userListSrv","deleteAllUsersSrv","userCreateTest","stateListSrvTest","serviceTest","postUserInfoSrvTest","userServiceTest","deleteAllUsersServiceTest","countryListServiceTest","states","getStatesList","then","response","stateName","data","country","getcountryList","countryName","clearForm","document","getElementById","reset","userInfo","rating","rateFunction","renter_rating","deactivateUserChecked","inactive","userStatus","submit","sName","stateObj","name","exists","getUsers","getUserList","users","i","length","email","first_name","firstName","state_id","id","submitUserInfo","alert","deleteUsers","deleteAllUsers","uiGridConstants","getUserColumnsSrv","userManageControllerTest","getUserColumnsSrvServiceTest","updateUserServiceTest","StateServiceTest","gridOptions","enableRowSelection","enableRowHeaderSelection","enableFiltering","columnDefs","displayName","onRegisterApi","gridApi","grid1Api","edit","on","afterCellEdit","rowEntity","updatedUser","update","getCustomUserList","updateObj","uId","expectedObj","last_name","phone","address1","address2","city","zip","auth_id","getId","country_id","updateUser","directive","restrict","template","scope","ratingValue","max","onRatingSelected","link","elem","attrs","updateStars","stars","push","filled","toggle","index","$watch","oldVal","newVal","service","$http","get","method","httpResponse","console","log","JSON","stringify","getColumnList"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.grid', 'ui.grid.selection', 'ui.grid.edit'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        $stateProvider\r\n            .state('home', {\r\n                templateUrl: '../views/home.html',\r\n                url: '/'\r\n            })\r\n            .state('dashboard', {\r\n                templateUrl: '../views/dashboard.html',\r\n                url: '/dashboard',\r\n            })\r\n            .state('user_create', {\r\n                templateUrl: '../views/user_create.html',\r\n                url: '/user_create',\r\n                controller: 'userCreate'\r\n            })\r\n            .state('user_manage', {\r\n                templateUrl: '../views/user_manage.html',\r\n                url: '/user_manage',\r\n                controller: 'userManage'\r\n            })\r\n    })","angular.module('app').controller('mainCtrl', function ($scope) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    $scope.controllerTest = 'Controller Engaged!!!'\r\n\r\n})","","","","angular.module('app').controller('userCreate', function ($scope, stateListSrv, countryListSrv, updateUserSrv, postUserInfoSrv, userListSrv, deleteAllUsersSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS \r\n    $scope.userCreateTest = 'userCreate controller is working correctly'\r\n    $scope.stateListSrvTest = stateListSrv.serviceTest\r\n    $scope.postUserInfoSrvTest = postUserInfoSrv.serviceTest\r\n    $scope.userServiceTest = userListSrv.userServiceTest\r\n    $scope.deleteAllUsersServiceTest = deleteAllUsersSrv.deleteAllUsersServiceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n    \r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  VARIABLES\r\n\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"userCreateForm\").reset()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ SUBMIT USER FORM DATA\r\n    // .................... user object to submit   \r\n    $scope.userInfo = { \"country_id\": 1, \"inactive\": false }\r\n\r\n    // .................... sets rent rating\r\n    $scope.rating = 5;\r\n    $scope.rateFunction = (rating) => $scope.userInfo.renter_rating = rating\r\n\r\n    // .................... sets checkbox\r\n    $scope.deactivateUserChecked = () => $scope.userInfo.inactive = $scope.userStatus\r\n\r\n\r\n    $scope.submit = () => {\r\n        var sName = $scope.stateObj.name\r\n        var exists = 0\r\n\r\n        // .................... checks to verify that the user doesn't already exist in the database.\r\n        var getUsers = () => {\r\n            userListSrv.getUserList().then((response) => {\r\n                $scope.users = response.data\r\n                // console.log(JSON.stringify($scope.users))\r\n                for (let i = 0; i < $scope.users.length; i++) {\r\n                    // console.log(\"what the fuck!\")\r\n                    // console.log(`db email ${$scope.users[i].email}`)\r\n                    if ($scope.users[i].email === $scope.userInfo.email && $scope.users[i].first_name === $scope.userInfo.firstName) {\r\n                        exists = 1\r\n                        break;\r\n                    }\r\n                }\r\n                // console.log(`exists inside after function ${exists}`)\r\n                for (let i = 0; i < $scope.stateName.length; i++) {\r\n                    if ($scope.stateName[i].name === sName) {\r\n                        $scope.userInfo.state_id = $scope.stateName[i].id\r\n                    }\r\n                }\r\n                if (exists === 0) {\r\n                    // console.log(`userInfo object that will be sent is ${JSON.stringify($scope.userInfo)}`)\r\n                    postUserInfoSrv.submitUserInfo($scope.userInfo)\r\n                    alert(`User has been created.`)\r\n                    $scope.clearForm()\r\n                }\r\n                else {\r\n                    alert(`User already exists!`)\r\n                }\r\n            })\r\n        }\r\n        getUsers()\r\n    }\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ DELETE ALL USERS\r\n    $scope.deleteUsers = () => { return deleteAllUsersSrv.deleteAllUsers() }\r\n\r\n\r\n\r\n    // no code below this line\r\n})","angular.module('app').controller('userManage', function ($scope, uiGridConstants, userListSrv, stateListSrv, countryListSrv, updateUserSrv, getUserColumnsSrv) {\r\n    // »»»»»»»»»»»»»»»»»»»║  TESTS\r\n    $scope.userManageControllerTest = 'userManage Controller is ready to role!'\r\n    $scope.getUserColumnsSrvServiceTest = getUserColumnsSrv.getUserColumnsSrvServiceTest\r\n    $scope.updateUserServiceTest = updateUserSrv.updateUserServiceTest\r\n    $scope.StateServiceTest = stateListSrv.serviceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableRowSelection: false\r\n        , enableRowHeaderSelection: false\r\n        , enableFiltering: true\r\n        , columnDefs: [ //this shows which columns show in grid. the value needs to match the data key.\r\n            // { name: 'id' },\r\n            { name: 'first_name'}\r\n            , { name: 'last_name'}\r\n            , { name: 'phone'}\r\n            , { name: 'email'}\r\n            , { name: 'state', displayName: 'State' }\r\n        ]\r\n        , onRegisterApi: (gridApi) => {\r\n            $scope.grid1Api = gridApi\r\n\r\n            // ...........   update the user on lost focus, tab, or enter\r\n            gridApi.edit.on.afterCellEdit($scope, function (rowEntity) {\r\n                $scope.updatedUser = rowEntity\r\n                $scope.update($scope.updatedUser)\r\n            })\r\n        }\r\n    };\r\n\r\n    // ....................  get column data\r\n    $scope.getUsers = () => userListSrv.getCustomUserList().then((response) => $scope.gridOptions.data = response.data)\r\n    $scope.getUsers()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)\r\n    $scope.states()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║  GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)\r\n    $scope.country()\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ UPDATE USER\r\n    $scope.update = (updateObj) => {\r\n        var uId = updateObj.id\r\n        var expectedObj = {\r\n            \"firstName\": updateObj.first_name\r\n            , \"lastName\": updateObj.last_name\r\n            , \"phone\": updateObj.phone\r\n            , \"email\": updateObj.email\r\n            , \"address1\": updateObj.address1\r\n            , \"address2\": updateObj.address2\r\n            , \"city\": updateObj.city\r\n            , \"state_id\": updateObj.state\r\n            , \"country_id\": updateObj.country\r\n            , \"zip\": updateObj.zip\r\n            , \"renter_rating\": updateObj.renter_rating\r\n            , \"inactive\": updateObj.inactive\r\n            , \"auth_id\": updateObj.auth_id\r\n        }\r\n        let getId = () => {\r\n            // ..... convert state name\r\n            for (let i = 0; i < $scope.stateName.length; i++) {\r\n                if ($scope.stateName[i].name === expectedObj.state_id) {\r\n                    expectedObj.state_id = $scope.stateName[i].id\r\n                }\r\n            }\r\n            // ..... convert country name\r\n            for (let i = 0; i < $scope.countryName.length; i++) {\r\n                if ($scope.countryName[i].name === expectedObj.country_id) {\r\n                    expectedObj.country_id = $scope.countryName[i].id\r\n                }\r\n            }\r\n            // console.log(`this is what will be sent! ${uId}`)\r\n            // console.log(`this is what will be sent! ${JSON.stringify(expectedObj)}`)\r\n            updateUserSrv.updateUser(uId, expectedObj)\r\n        }\r\n        getId()\r\n    }\r\n})","angular.module('app').directive('starRating', \r\n    function () {\r\n        return {\r\n            restrict: 'A',\r\n            template: '<ul class=\"rating\">'\r\n            + '\t<li ng-repeat=\"star in stars\" ng-class=\"star\" ng-click=\"toggle($index)\">'\r\n            + '\\u2605'\r\n            + '</li>'\r\n            + '</ul>',\r\n            scope: {\r\n                ratingValue: '=',\r\n                max: '=',\r\n                onRatingSelected: '&'\r\n            },\r\n            link: function (scope, elem, attrs) {\r\n                var updateStars = function () {\r\n                    scope.stars = [];\r\n                    for (var i = 0; i < scope.max; i++) {\r\n                        scope.stars.push({\r\n                            filled: i < scope.ratingValue\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.toggle = function (index) {\r\n                    scope.ratingValue = index + 1;\r\n                    scope.onRatingSelected({\r\n                        rating: index + 1\r\n                    });\r\n                };\r\n\r\n                scope.$watch('ratingValue',\r\n                    function (oldVal, newVal) {\r\n                        if (newVal) {\r\n                            updateStars();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        };\r\n    }\r\n);","angular.module('app').service('countryListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.countryListServiceTest = 'the countryListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getcountryList = () => ($http.get('http://localhost:3000/api/country'))\r\n})","angular.module('app').service('deleteAllUsersSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.deleteAllUsersServiceTest = 'the deleteAllUsersSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.deleteAllUsers = function () {\r\n        $http({\r\n            url: 'http://localhost:3000/api/user',\r\n            method: 'DELETE'\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n\r\n})","angular.module('app').service('getUserColumnsSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.getUserColumnsSrvServiceTest = 'the getUserColumnsSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getColumnList = () => ($http.get('http://localhost:3000/api/user/columns'))\r\n})\r\n","angular.module('app').service('postUserInfoSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the postUserInfoSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.submitUserInfo = (data) => {\r\n        // console.log(`clicked submit and got ${JSON.stringify(data)}`)\r\n        $http({\r\n            url: 'http://localhost:3000/api/users',\r\n            method: 'POST',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n})","angular.module('app').service('stateListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.serviceTest = 'the stateListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getStatesList = () => ($http.get('http://localhost:3000/api/states'))\r\n})","angular.module('app').service('updateUserSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.updateUserServiceTest = 'the updateUserSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.updateUser = (id, data) => {\r\n        $http({\r\n            url: 'http://localhost:3000/api/users/' + id,\r\n            method: 'PUT',\r\n            data: data\r\n        }).then((httpResponse) => console.log('response:', JSON.stringify(httpResponse)))\r\n    }\r\n})\r\n\r\n","angular.module('app').service('userListSrv', function ($http) {\r\n    // »»»»»»»»»»»»»»»»»»»║ TESTS\r\n    this.userServiceTest = 'the userListSrv is connected'\r\n\r\n    // »»»»»»»»»»»»»»»»»»»║ ENDPOINTS\r\n    this.getUserList = () => ($http.get('http://localhost:3000/api/users'))\r\n    this.getCustomUserList = () => ($http.get('http://localhost:3000/api/users/custom'))\r\n})"]}