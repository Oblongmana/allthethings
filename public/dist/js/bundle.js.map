{"version":3,"sources":["app.js","services/countryListSrv.js","services/deleteAllUsersSrv.js","services/getUserColumnsSrv.js","services/postUserInfoSrv.js","services/stateListSrv.js","services/userListSrv.js","controllers/mainCtrl.js","controllers/notificationPrimary.js","controllers/notificationSecondary.js","controllers/settings.js","controllers/userCreate.js","controllers/userManage.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","service","$http","countryListServiceTest","getcountryList","get","deleteAllUsersServiceTest","deleteAllUsers","method","then","httpResponse","console","log","JSON","stringify","getUserColumnsSrvServiceTest","getColumnList","serviceTest","submitUserInfo","data","getStatesList","userServiceTest","getUserList","getCustomUserList","$scope","controllerTest","stateListSrv","countryListSrv","postUserInfoSrv","userListSrv","deleteAllUsersSrv","userCreateTest","stateListSrvTest","postUserInfoSrvTest","states","response","stateName","country","countryName","clearForm","document","getElementById","reset","userInfo","submit","sName","stateObj","name","exists","getUsers","users","i","length","email","first_name","firstName","state_id","id","alert","deleteUsers","uiGridConstants","getUserColumnsSrv","userManageControllerTest","gridOptions","enableFiltering","columnDefs","onRegisterApi","gridApi","grid1Api"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ui.grid'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        $stateProvider\r\n            .state('home', {\r\n                templateUrl: '../views/home.html',\r\n                url: '/'\r\n            })\r\n            .state('dashboard', {\r\n                templateUrl: '../views/dashboard.html',\r\n                url: '/dashboard',\r\n            })\r\n            .state('user_create', {\r\n                templateUrl: '../views/user_create.html',\r\n                url: '/user_create',\r\n                controller: 'userCreate'\r\n            })\r\n            .state('user_manage', {\r\n                templateUrl: '../views/user_manage.html',\r\n                url: '/user_manage',\r\n                controller: 'userManage'\r\n            })\r\n    })","angular.module('app').service('countryListSrv', function($http){\r\n    // =============== TESTS\r\n    this.countryListServiceTest = 'the countryListSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.getcountryList = () => ( $http.get('http://localhost:3000/api/country') )\r\n})","angular.module('app').service('deleteAllUsersSrv', function ($http) {\r\n    // =============== TESTS\r\n    this.deleteAllUsersServiceTest = 'the deleteAllUsersSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.deleteAllUsers = function() {\r\n        $http({\r\n            url: 'http://localhost:3000/api/user',\r\n            method: 'DELETE'\r\n        }).then(function (httpResponse) {\r\n            console.log('response:', JSON.stringify(httpResponse));\r\n        })\r\n    }\r\n\r\n})","angular.module('app').service('getUserColumnsSrv', function($http){\r\n    // =============== TESTS\r\n    this.getUserColumnsSrvServiceTest = 'the getUserColumnsSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.getColumnList = () => ( $http.get('http://localhost:3000/api/user/columns') )\r\n})\r\n","angular.module('app').service('postUserInfoSrv', function ($http) {\r\n    // =============== TESTS\r\n    this.serviceTest = 'the postUserInfoSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.submitUserInfo = (data) => {\r\n        // console.log(`clicked submit and got ${JSON.stringify(data)}`)\r\n        $http({\r\n            url: 'http://localhost:3000/api/users',\r\n            method: 'POST',\r\n            data: data\r\n        }).then(function (httpResponse) {\r\n            console.log('response:', JSON.stringify(httpResponse));\r\n        })\r\n    }\r\n\r\n})","angular.module('app').service('stateListSrv', function($http){\r\n    // =============== TESTS\r\n    this.serviceTest = 'the stateListSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.getStatesList = () => ( $http.get('http://localhost:3000/api/states') )\r\n})","angular.module('app').service('userListSrv', function($http){\r\n    // =============== TESTS\r\n    this.userServiceTest = 'the userListSrv is connected'\r\n\r\n    // =============== ENDPOINTS\r\n    this.getUserList = () => ( $http.get('http://localhost:3000/api/users') )\r\n    this.getCustomUserList = () => ( $http.get('http://localhost:3000/api/users/custom') )\r\n})","angular.module('app').controller('mainCtrl', function($scope){\r\n    // ...tests\r\n    $scope.controllerTest = 'Controller Engaged!!!'\r\n    \r\n})","","","","angular.module('app').controller('userCreate', function ($scope, stateListSrv, countryListSrv, postUserInfoSrv, userListSrv, deleteAllUsersSrv) {\r\n    // =============== TESTS\r\n    $scope.userCreateTest = 'userCreate controller is working correctly'\r\n    $scope.stateListSrvTest = stateListSrv.serviceTest\r\n    $scope.postUserInfoSrvTest = postUserInfoSrv.serviceTest\r\n    $scope.userServiceTest = userListSrv.userServiceTest\r\n    $scope.deleteAllUsersServiceTest = deleteAllUsersSrv.deleteAllUsersServiceTest\r\n    $scope.countryListServiceTest = countryListSrv.countryListServiceTest\r\n\r\n    // =============== VARIABLES\r\n\r\n\r\n    // =============== GET STATES LIST\r\n    $scope.states = () => stateListSrv.getStatesList().then((response) => $scope.stateName = response.data)    \r\n    $scope.states()\r\n\r\n    // =============== GET COUNTRY LIST\r\n    $scope.country = () => countryListSrv.getcountryList().then((response) => $scope.countryName = response.data)    \r\n    $scope.country()\r\n\r\n    // =============== CLEAR FORM\r\n    $scope.clearForm = () => document.getElementById(\"userCreateForm\").reset()\r\n\r\n    // =============== SUBMIT USER FORM DATA\r\n    $scope.userInfo = {\r\n        \"country_id\": 1\r\n    }\r\n    $scope.submit = () => {\r\n        var sName = $scope.stateObj.name\r\n        var exists = 0\r\n        // ...................... checks to verify that the user doesn't already exist in the database.\r\n        var getUsers = () => {\r\n            userListSrv.getUserList().then((response) => {\r\n                $scope.users = response.data\r\n                // console.log(JSON.stringify($scope.users))\r\n                for (let i = 0; i < $scope.users.length; i++) {\r\n                    // console.log(\"what the fuck!\")\r\n                    // console.log(`db email ${$scope.users[i].email}`)\r\n                    if ($scope.users[i].email === $scope.userInfo.email && $scope.users[i].first_name === $scope.userInfo.firstName) {\r\n                        exists = 1\r\n                        break;\r\n                    }\r\n                }\r\n                // console.log(`exists inside after function ${exists}`)\r\n                for (let i = 0; i < $scope.stateName.length; i++) {\r\n                    if ($scope.stateName[i].name === sName) {\r\n                        $scope.userInfo.state_id = $scope.stateName[i].id\r\n                    }\r\n                }\r\n                if (exists === 0) {\r\n                    // console.log(`userInfo object that will be sent is ${JSON.stringify($scope.userInfo)}`)\r\n                    postUserInfoSrv.submitUserInfo($scope.userInfo)\r\n                    alert(`User has been created.`)\r\n                    $scope.clearForm()\r\n                }\r\n                else {\r\n                    alert(`User already exists!`)\r\n                }\r\n            })\r\n        }\r\n        getUsers()\r\n    }\r\n\r\n    // =============== DELETE ALL USERS\r\n    $scope.deleteUsers = function () { return deleteAllUsersSrv.deleteAllUsers() }\r\n\r\n\r\n\r\n    // no code below this line\r\n})","angular.module('app').controller('userManage', function ($scope, uiGridConstants, userListSrv, getUserColumnsSrv) {\r\n    // ===============  TESTS\r\n    $scope.userManageControllerTest = 'userManage Controller is ready to role!'\r\n    $scope.getUserColumnsSrvServiceTest = getUserColumnsSrv.getUserColumnsSrvServiceTest\r\n\r\n    // ===============  COLUMNS AND DATA\r\n    $scope.gridOptions = {\r\n        enableFiltering: true,\r\n        columnDefs: [],\r\n        onRegisterApi: function (gridApi) {\r\n            $scope.grid1Api = gridApi;\r\n        }\r\n    };\r\n    $scope.getUsers = () => {\r\n        userListSrv.getCustomUserList().then((response) => {\r\n            $scope.gridOptions.data = response.data\r\n        })\r\n    }\r\n    $scope.getUsers()\r\n\r\n})"]}